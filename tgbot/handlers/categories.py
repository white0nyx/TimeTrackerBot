from datetime import datetime

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery

from tgbot.keyboards.inline import yes_no_keyboard, generate_category_keyboard
from tgbot.keyboards.reply import cancel_button, main_keyboard
from tgbot.misc.states import States
from tgbot.misc.work_with_json import get_user_from_json_db, update_user_data, fill_all_categories_past_date, \
    get_all_category_names
from tgbot.misc.work_with_text import get_the_time_in_seconds, is_valid_time, get_time_in_str_text


async def my_categories_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ö–ê–¢–ï–ì–û–†–ò–ò"""

    user_id = str(message.from_user.id)

    user = get_user_from_json_db(user_id)
    categories = user.get('categories')
    fill_all_categories_past_date(user_id)
    if not categories:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n'
                             '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.',
                             reply_markup=generate_category_keyboard())

    else:
        await message.answer('üìì –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=generate_category_keyboard(categories))

    await States.my_categories.set()


def register_my_categories_button(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–ê–¢–ï–ì–û–†–ò–ò"""
    dp.register_message_handler(my_categories_button,
                                Text('üìì –ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                                state=[None, States.my_categories, States.category_menu])


async def add_new_category(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–û–í–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø"""
    await call.message.delete()
    await call.answer(cache_time=60)
    await States.add_new_category_name.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=cancel_button)


def register_add_new_category(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ù–û–í–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø"""
    dp.register_callback_query_handler(add_new_category,
                                       text='new_category',
                                       state=[None,
                                              States.add_time_to_category,
                                              States.my_categories,
                                              States.add_new_category_name,
                                              States.add_new_category_based_seconds])


async def save_name_new_category(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    category_name = message.text
    user_id = message.from_user.id

    if len(category_name) > 32:
        await message.answer('‚ö† –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–æ–π –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤\n\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥', reply_markup=cancel_button)
        return

    if category_name in get_all_category_names(user_id):
        await message.answer('‚ö† –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥', reply_markup=cancel_button)
        return

    async with state.proxy() as data:
        data['suspect_category'] = {}
        data['suspect_category']['name'] = category_name

    await message.answer(f'–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ '
                         f'–≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º:—Å—Å\n\n'
                         f'–ù–∞–ø—Ä–∏–º–µ—Ä: 01:20:03 –∏–ª–∏ 1:20:3\n\n'
                         f'–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 0, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤—Ä–µ–º—è', reply_markup=cancel_button)
    await States.add_new_category_based_seconds.set()


def register_save_name_new_category(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    dp.register_message_handler(save_name_new_category, state=[States.add_new_category_name])


async def save_based_minutes_new_category(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    str_time = message.text

    if is_valid_time(str_time) is not True:
        await message.answer(text=is_valid_time(str_time), reply_markup=cancel_button)
        return

    seconds = get_the_time_in_seconds(str_time)
    async with state.proxy() as data:
        data['suspect_category']['based_seconds'] = int(seconds)
        data['suspect_category']['seconds'] = int(seconds)
        data['suspect_category']['operations'] = []

    async with state.proxy() as data:
        category_name = data['suspect_category']['name']
        category_seconds = data['suspect_category']['based_seconds']
        category_time = get_time_in_str_text(category_seconds)

    await message.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: \n\n'
                         f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n'
                         f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {category_time}', reply_markup=yes_no_keyboard)

    await States.confirm_data.set()


def register_save_minutes_new_category(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç"""
    dp.register_message_handler(save_based_minutes_new_category, state=[States.add_new_category_based_seconds])


async def confirm_data(call: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    await call.answer(cache_time=60)
    await call.message.delete()
    user_id = call.from_user.id
    if call.data == 'yes':

        user = get_user_from_json_db(user_id)
        async with state.proxy() as data:

            suspect_category = data['suspect_category']

            if len(user['categories']) == 0:
                new_number = 0

            else:
                new_number = int(user['categories'][-1]['callback_data'].split('category_')[-1]) + 1

            suspect_category['callback_data'] = 'category_' + str(new_number)
            user['categories'].append(suspect_category)

            if data.get('last_time') is not None:
                new_time = get_the_time_in_seconds(data.get('last_time'))

                old_time = int(user['categories'][-1]['based_seconds'])

                user['categories'][-1]['seconds'] = old_time + new_time

                date_now = str(datetime.now()).split()[0]
                start = str(data.get('last_start')).split()[-1]
                end = str(data.get('end_time')).split()[-1].split('.')[0]
                seconds = get_the_time_in_seconds(data.get('last_time'))
                user['categories'][-1]['operations'].append({'date': date_now,
                                                             'start': start,
                                                             'end': end,
                                                             'seconds': seconds})

            update_user_data(user_id, user)

        await call.message.answer('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=main_keyboard)

        await state.reset_state(with_data=True)

    elif call.data == 'no':
        async with state.proxy() as data:
            data['suspect_category'] = {}

        await call.message.answer('‚ùå –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ—Ç–º–µ–Ω–∞', reply_markup=main_keyboard)
        await state.reset_state(with_data=True)


def register_confirm_data(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    dp.register_callback_query_handler(confirm_data, text=['yes', 'no'], state=[States.confirm_data])


def register_all_categories_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    register_my_categories_button(dp)
    register_add_new_category(dp)
    register_save_name_new_category(dp)
    register_save_minutes_new_category(dp)
    register_confirm_data(dp)
