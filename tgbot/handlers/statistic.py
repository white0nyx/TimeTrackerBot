import os

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, InputFile, MediaGroup, CallbackQuery

from tgbot.keyboards.inline import generate_statistic_period_keyboard
from tgbot.misc.analytics import get_plot_total_time, get_diagram_week_statistic, get_circle_diagram_sessions_durations, \
    is_possible_get_graphics, get_diagram_by_hours_in_day
from tgbot.misc.states import States
from tgbot.misc.work_with_json import get_user_from_json_db, update_user_data, fill_all_categories_past_date
from tgbot.misc.work_with_text import get_statistic


async def statistic_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user_id = message.from_user.id

    fill_all_categories_past_date(user_id)
    user = get_user_from_json_db(user_id)

    if not user.get('categories'):
        await message.answer('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É –≤–∞—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
        return

    period_statistic = user.get('period_statistic')

    if period_statistic == 'day':
        period_statistic_in_days = 1

    elif period_statistic == 'week':
        period_statistic_in_days = 7

    elif period_statistic == 'month':
        period_statistic_in_days = 30

    elif period_statistic == 'year':
        period_statistic_in_days = 365

    else:
        period_statistic_in_days = None

    categories = user.get('categories')

    album = MediaGroup()
    text = get_statistic(user_id, categories, period_statistic)

    if text[0] == '‚ö†':
        await message.answer(text)
        return

    # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—â–∏—Ö —á–∞—Å–æ–≤
    get_plot_total_time(str(user_id), period_statistic_in_days)
    all_time_plot = InputFile(f'data/{user_id}_total_time.png')
    album.attach_photo(all_time_plot)

    # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –¥–Ω—è–º
    get_diagram_week_statistic(str(user_id), period_statistic_in_days)
    diagram_week_statistic = InputFile(f'data/{user_id}_week_statistic.png')
    album.attach_photo(diagram_week_statistic)

    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
    get_circle_diagram_sessions_durations(str(user_id))
    circle_diagram_sessions_durations = InputFile(f'data/{user_id}_sessions_durations_statistic.png')
    album.attach_photo(circle_diagram_sessions_durations)

    # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —á–∞—Å–∞–º
    get_diagram_by_hours_in_day(str(user_id))
    sessions_hours = InputFile(f'data/{user_id}_session_count_by_hour_in_day.png')
    album.attach_photo(sessions_hours)

    async with state.proxy() as data:
        data['message'] = message
        data['message_img'] = await message.answer_media_group(album)
        data['message_text'] = await message.answer(text, reply_markup=generate_statistic_period_keyboard(user_id))

    os.remove(f'data/{user_id}_total_time.png')
    os.remove(f'data/{user_id}_week_statistic.png')
    os.remove(f'data/{user_id}_sessions_durations_statistic.png')
    os.remove(f'data/{user_id}_session_count_by_hour_in_day.png')


def register_statistic_button(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    dp.register_message_handler(statistic_button, Text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
                                state=[None, States.my_categories, States.category_menu])


async def changing_statistics_period_button(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–ó–ú–ï–ù–ò–¢–¨ –ü–ï–†–ò–û–î –°–¢–ê–¢–ò–°–¢–ò–ö–ò"""
    user_id = call.from_user.id
    await call.answer(cache_time=1)
    async with state.proxy() as data:
        for img in data['message_img']:
            await img.delete()
        await data['message_text'].delete()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                              reply_markup=generate_statistic_period_keyboard(user_id))


def register_changing_statistics_period_button(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–ó–ú–ï–ù–ò–¢–¨ –ü–ï–†–ò–û–î –°–¢–ê–¢–ò–°–¢–ò–ö–ò"""
    dp.register_callback_query_handler(changing_statistics_period_button, text='change_period', state='*')


async def period_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = call.from_user.id

    await call.answer(cache_time=10)

    user = get_user_from_json_db(user_id)
    user['period_statistic'] = call.data
    update_user_data(user_id, user)

    async with state.proxy() as data:
        message = data['message']

    await statistic_button(message, state)


def register_period_selection(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    dp.register_callback_query_handler(callback=period_selection,
                                       text=['day', 'week', 'month', 'year', 'all_time'],
                                       state='*')


def register_all_statistic(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    register_statistic_button(dp)
    register_changing_statistics_period_button(dp)
    register_period_selection(dp)
